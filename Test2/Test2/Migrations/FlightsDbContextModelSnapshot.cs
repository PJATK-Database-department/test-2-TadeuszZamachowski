// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestExample.Contexts;

namespace Test2.Migrations
{
    [DbContext(typeof(FlightsDbContext))]
    partial class FlightsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Test2.Models.CityDict", b =>
                {
                    b.Property<int>("IdCityDict")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdCityDict");

                    b.ToTable("CityDicts");
                });

            modelBuilder.Entity("Test2.Models.Flight", b =>
                {
                    b.Property<int>("IdFlight")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCityDict")
                        .HasColumnType("int");

                    b.Property<int>("IdPlane")
                        .HasColumnType("int");

                    b.HasKey("IdFlight");

                    b.HasIndex("IdCityDict");

                    b.HasIndex("IdPlane");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Test2.Models.FlightPassanger", b =>
                {
                    b.Property<int>("IdFlight")
                        .HasColumnType("int");

                    b.Property<int>("IdPassanger")
                        .HasColumnType("int");

                    b.HasKey("IdFlight", "IdPassanger");

                    b.HasIndex("IdPassanger");

                    b.ToTable("FlightPassangers");
                });

            modelBuilder.Entity("Test2.Models.Passenger", b =>
                {
                    b.Property<int>("IdPassanger")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PassportNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdPassanger");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Test2.Models.Plane", b =>
                {
                    b.Property<int>("IdPlane")
                        .HasColumnType("int");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPlane");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Test2.Models.Flight", b =>
                {
                    b.HasOne("Test2.Models.CityDict", "CityDict")
                        .WithMany("Flights")
                        .HasForeignKey("IdCityDict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Plane", "Plane")
                        .WithMany("Flights")
                        .HasForeignKey("IdPlane")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityDict");

                    b.Navigation("Plane");
                });

            modelBuilder.Entity("Test2.Models.FlightPassanger", b =>
                {
                    b.HasOne("Test2.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("IdFlight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test2.Models.Passenger", "Passenger")
                        .WithMany("FlightPassangers")
                        .HasForeignKey("IdPassanger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Test2.Models.CityDict", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("Test2.Models.Passenger", b =>
                {
                    b.Navigation("FlightPassangers");
                });

            modelBuilder.Entity("Test2.Models.Plane", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
